[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# add_joker()
# patch to spawn Cine cards correctly with debug menu and challenges (if that ever happens)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local _area = G.P_CENTERS[joker].consumeable and G.consumeables or G.jokers'''
position = "after"
payload = '''
if G.P_CENTERS[joker].set == "Cine" then
    _area = G.cine_quests
end
'''
match_indent = true

# add_joker()
# patch to spawn Cine cards correctly with debug menu and challenges (if that ever happens)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif G.consumeables then G.consumeables:emplace(card) end'''
position = "before"
payload = '''
elseif G.cine_quests and card.ability.set == "Cine" then
    G.cine_quests:emplace(card)
'''
match_indent = true


# Game:start_run()
# patch to add the area for Cine Cards below consumables
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.playing_cards = {}'''
position = "before"
payload = '''
self.cine_quests = CardArea(0, 0, CAI.deck_W, CAI.deck_H, {
    card_limit = self.GAME.starting_params.cine_quest_slots,
    type = "joker",
    highlight_limit = 1
})
'''
match_indent = true

# generate_card_ui()
# Correct UI for negative cine cards
# Used for Filmstrip Sleeve + Deck
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''for _, v in ipairs(info_queue) do'''
position = "after"
payload = '''
if v.key == "e_negative_consumable" and _c.set == "Cine" then
    v.key = "e_negative_cine"
end
'''
match_indent = true

# G.FUNCS.check_for_buy_space()
# Disable buy space check for Tags
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''card.ability.set ~= 'Default' and*'''
position = "before"
payload = '''
card.ability.set ~= "Tag" and
'''
match_indent = true

# G.FUNCS.buy_from_shop
# Prevent Tags from being added to the deck
# Position = "at" but not risky because it includes pattern in the payload, so other mods' patches should still work
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''c1:add_to_deck()'''
position = "at"
payload = '''
if c1.ability.set ~= "Tag" then
    c1:add_to_deck()
end'''
match_indent = true

# Tag:apply_to_run()
# Ensures that the second tag created by a Double Tag triggers because if the Mega Stamp Tag
# generates a Double Tag as its random tag and any immediate tag as its pack tag then the immediate
# tag gets duplicated but the second copy will only trigger after clearing a blind
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''add_tag(Tag(_context.tag.key))'''
position = "after"
payload = '''
for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'immediate'})
end
'''
match_indent = true

# G.FUNCS.buy_from_shop()
# When Tags are purchased, properly add them to the game and remove from the shop
# Applying immediate tags is handled in injected update_shop()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''elseif e.config.id ~= 'buy_and_use' then'''
position = "before"
payload = '''
elseif c1.ability.set == "Tag" then
    add_tag(c1.ability.tag)
    c1:remove()

    play_sound("generic1", 0.9 + math.random() * 0.1, 0.8)
    play_sound("holo1", 1.2 + math.random() * 0.1, 0.4)
    
    for i = 1, #G.GAME.tags do
        G.GAME.tags[i]:apply_to_run({type = 'immediate'})
    end
'''
match_indent = true

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.ref_table:redeem()'''
position = "after"
payload = '''
elseif card.ability.set == "Tag" then
    add_tag(card.ability.tag)
    card:remove()

    play_sound("generic1", 0.9 + math.random() * 0.1, 0.8)
    play_sound("holo1", 1.2 + math.random() * 0.1, 0.4)

    for i = 1, #G.GAME.tags do
        G.GAME.tags[i]:apply_to_run({type = 'immediate'})
    end

    dont_dissolve = true
    delay_fac = 0.2'''
match_indent = true

# start_materialize()
# Adds dissolve colour for cine cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''(self.ability.set == 'Spectral' and {G.C.SECONDARY_SET.Spectral}) or'''
position = "after"
payload = '''
(self.ability.set == 'Cine' and {G.C.SECONDARY_SET.Cine}) or'''
match_indent = true

# # Card:draw()
# # Adds shaders for certain cine cards
# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''if self.ability.name == 'Invisible Joker' and (self.config.center.discovered or self.bypass_discovery_center) then'''
# position = "before"
# payload = '''
# if self.ability.set == "Cine" and (not self.edition or not self.edition.negative) then
#     if self.ability.name == "The Unseen" and (self.config.center.discovered or self.bypass_discovery_center) then
#         self.children.center:draw_shader("dvrprv_ticket_negative", nil, self.ARGS.send_to_shader)
#         self.children.center:draw_shader("negative_shine", nil, self.ARGS.send_to_shader)

#         if self.children.front then
#             self.children.front:draw_shader("dvrprv_ticket_negative", nil, self.ARGS.send_to_shader)
#         end
#     elseif self.ability.name == "I Sing, I've No Shape" and self.config.center.discovered then
#         self.children.center:draw_shader("dvrprv_ticket_polychrome", nil, self.ARGS.send_to_shader)
#     else
#         self.children.center:draw_shader("dvrprv_ticket", nil, self.ARGS.send_to_shader)
#     end
# end
# '''
# match_indent = true

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''elseif card.ability.set == 'Enhanced' or card.ability.set == 'Default'*'''
position = "before"
payload = '''
::reverie_use_card_consumable_skip::'''
match_indent = true

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if card:check_use() then '''
position = "before"
payload = '''
local is_pack_card = card.area and card.area == G.pack_cards'''
match_indent = true

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''*G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED*'''
position = "before"
payload = '''
local is_cine = Reverie.is_cine_or_reverie(card)
if is_pack_card and (Reverie.is_in_reverie_pack() or is_cine) then
    (is_cine and G.cine_quests or G.consumeables):emplace(card)
    card:add_to_deck()
    play_sound('card1', 0.8, 0.6)
    play_sound('generic1')
    dont_dissolve = true
    delay_fac = 0.2

    goto reverie_use_card_consumable_skip
end'''
match_indent = true

# card_eval_status_text()
# Position card tooltips for cine cards
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif card.area == G.hand*'''
position = "before"
payload = '''
elseif card.area == G.cine_quests then
    y_off = 0.05 * card.T.h'''
match_indent = true

# G.FUNCS.end_consumeable()
# blocks newly gained new_blind_choice tags from triggering in shop
[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''ease_background_colour_blind\(G.GAME.PACK_INTERRUPT\)((.|\n)*?)(?<indent>[ \t]*)for i = 1, #G\.GAME\.tags do\n'''
position = "after"
line_prepend = "$indent"
payload = '''
if G.shop then
    break -- blocking newly gained new_blind_choice tags from triggering in shop
end

'''

# Card:hover()
# Add tooltip for jokers affected by morsel
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.ability_UIBox_table = self:generate_UIBox_ability_table()'''
position = "after"
payload = '''

if self.ability.morseled then
    Reverie.morselize_UI(self)
end
'''
match_indent = true

# Card:set_edition() SMOD override
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''elseif self.ability.set == 'Joker' and self.area == G.jokers then'''
position = "before"
payload = '''
elseif self.ability.consumeable and self.area == G.cine_quests then
    G.cine_quests.config.card_limit = G.cine_quests.config.card_limit - self.edition.card_limit
'''
match_indent = true

# Card:set_edition() SMOD override
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = '''elseif self.ability.set == 'Joker' then'''
position = "before"
payload = '''
    if self.ability.consumeable and self.area == G.cine_quests then
        G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit
        G.cine_quests.config.card_limit = G.cine_quests.config.card_limit + self.edition.card_limit
    end
'''
match_indent = true

# G.FUNCS.use_card()
# As the maintainer of the fork, couldn't tell ya what this is for
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.ref_table:use_consumeable(area)'''
position = "after"
payload = '''
e.config.ref_table.ability.not_destroyed = true
'''
match_indent = true

# G.FUNCS.buy_from_shop
# Patch to make controller go to the correct card area after buying a shop tag
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.CONTROLLER:save_cardarea_focus('jokers')'''
position = "before"
payload = '''
if c1.ability.set == "Tag" then
    G.CONTROLLER:save_cardarea_focus("shop_jokers")
    G.CONTROLLER:recall_cardarea_focus("shop_jokers")

else
'''
match_indent = true

# G.FUNCS.buy_from_shop
# Patch to make controller go to the correct card area after buying a shop tag
# This just adds the end of the else statement
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.CONTROLLER:recall_cardarea_focus('jokers')'''
position = "after"
payload = '''
end
'''
match_indent = true

# get_badge_colour()
# Adds colour for Morsel badge
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''pinned_left = G.C.ORANGE,'''
position = "before"
payload = '''
morseled = HEX("b0aa9f"),'''
match_indent = true

# G.FUNCS.reroll_shop()
# Set adjusted reroll prices for active cine cards
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''calculate_reroll_cost(final_free)'''
position = "after"
payload = '''
Reverie.calculate_reroll_cost()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if polled_rate > check_rate and polled_rate <= check_rate + v.val then'''
position = "before"
payload = '''
if _ == 1 and G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_dvrprv_filmstrip" and G.GAME.selected_back.name == "Filmstrip Deck" then
    local rate = CardSleeves.Sleeve:get_obj(G.GAME.selected_sleeve).config.rate
    table.insert(rates, {
        type = "Cine_Quest",
        val = rate
    })
    total_rate = total_rate + rate
    polled_rate = pseudorandom(pseudoseed("cdt"..G.GAME.round_resets.ante)) * total_rate
end
'''
match_indent = true

# Card:flip()
# Creates illusion of Cine card flipping over to its back without actually flipping it over
# Copied from Bunco's Cassette
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.facing='back'"
position = 'after'
match_indent = true
payload = '''
if self.config.center.set == 'Cine' then
    self:flip()
end
'''

# Tag:set_ability()
# Fixes orbital tags
# Stolen from Ortalab, clearly they ran into the same problems as I
[[patches]]
[patches.pattern]
target = 'tag.lua'
pattern = '''
if G.GAME.orbital_choices and G.GAME.orbital_choices[G.GAME.round_resets.ante][self.ability.blind_type] then
    self.ability.orbital_hand = G.GAME.orbital_choices[G.GAME.round_resets.ante][self.ability.blind_type]
end
'''
position = 'at'
match_indent = true
payload = '''
if G.GAME.orbital_choices and G.GAME.orbital_choices[G.GAME.round_resets.ante] and G.GAME.orbital_choices[G.GAME.round_resets.ante][self.ability.blind_type] then
    self.ability.orbital_hand = G.GAME.orbital_choices[G.GAME.round_resets.ante][self.ability.blind_type]       
else
    local _poker_hands = {}
    for k, v in pairs(G.GAME.hands) do
        if v.visible then _poker_hands[#_poker_hands+1] = k end
    end
    G.GAME.orbital_choices[G.GAME.round_resets.ante] = G.GAME.orbital_choices[G.GAME.round_resets.ante] or {}
    G.GAME.orbital_choices[G.GAME.round_resets.ante][self.ability.blind_type] = pseudorandom_element(_poker_hands, pseudoseed('orbital'))
end
'''
